#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass llncs
\begin_preamble
\usepackage{pgfgantt}
\usepackage{adjustbox}
\usepackage{listings}
\usepackage{hyperref}
\hypersetup{pdftex,colorlinks=true,allcolors=blue}
\usepackage{hypcap}
\usepackage{a4wide}
\usepackage[hide]{ed}

\title{Notation-based Semantification}
\author{Toloaca Ion \and Kohlhase Michael}
\institute{Jacobs University Bremen}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 4cm
\topmargin 3cm
\rightmargin 4cm
\bottommargin 3cm
\headheight 3cm
\headsep 3cm
\footskip 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Notation-based Semantification
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The scientific community produces a large number of mathematical papers
 (approximately 
\begin_inset Formula $108.000$
\end_inset

 new papers per year 
\begin_inset CommandInset citation
LatexCommand citep
key "arxivSubmission"

\end_inset

), which raises the importance of machine based processing of such documents.
 Unfortunately, the most popular formats in which these papers are found
 (for instance, LaTeX) do not contain much information that would allow
 the computers to infer the human-understandable knowledge contained within
 a paper.
 Since, at this point, changing these formats is not practically possible,
 the other solution is to add a semantic flavor to the existing documents
 by translating them into a more suitable format, for instance, Content
 MathML.
\end_layout

\begin_layout Standard
As a system as complex as the current scientific community was created,
 it went through a series of evolutions in the attempt to introduce the
 best method of writing scientific documents.
 This process was highly influenced by the invention and spreading of the
 internet.
 Scientists understood the necessity of a standard that could help them
 write and exchange their findings in an efficient way.
 A lot of effort has gone into translating books into digital documents.
 
\end_layout

\begin_layout Standard
The next step in this evolution is translating digital documents into knowledge-
rich digital documents.
 This next step can only happen if a new feasible way of transition appears,
 which 
\series bold
MathSemantifier 
\series default
attempts to become.
\end_layout

\begin_layout Standard
An important concept necessary in order to understand why semantification
 is a complex process is ambiguity.
 Mathematical documents are not a simple collection of symbols.
 The main use of these documents emerges only when the intended semantics
 of a document is accessible.
 However, humans tend to be lazy in writing down the whole graph, but instead
 rely on implicit human knowledge to decipher these documents.
 This is where ambiguity comes into play, when the author relies on the
 ability of the human to use the context of document in order to pinpoint
 the actual meaning an expression.
 Ambiguities can be largely divided into two: structural and idiomatic ambiguiti
es.
\end_layout

\begin_layout Standard
A simple example that demonstrates the concept of structural ambiguities
 can be 
\begin_inset Formula $\sin\ x\ /\ 2$
\end_inset

.
 It can mean one of the following:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\sin$
\end_inset

 applied to 
\begin_inset Formula $\frac{x}{2}$
\end_inset

 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\frac{1}{2}$
\end_inset

 times 
\begin_inset Formula $\sin$
\end_inset

 applied to 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout Standard
Contrary to structural ambiguities, idiomatic ambiguities are not due to
 different parse trees.
 Given one single parse tree, some formulae allow for multiple readings.
 A standard example would be 
\begin_inset Formula $B_{n}$
\end_inset

.
 This could be:
\end_layout

\begin_layout Enumerate
The sequence of Bernoulli numbers
\end_layout

\begin_layout Enumerate
A user defined sequence
\end_layout

\begin_layout Enumerate
The vertex of one of a series of geometric objects
\end_layout

\begin_layout Standard
In this paragraph we propose a solution to the ambiguity problem described
 above.
 Consider 
\begin_inset Formula $c(a(b))$
\end_inset

.
 The most natural interpretation is 
\begin_inset Formula $c$
\end_inset

 of 
\begin_inset Formula $a$
\end_inset

 of 
\begin_inset Formula $b$
\end_inset

.
 However, there arise multiple meanings if we consider that the application
 could be interpreted as multiplication.
 The human reader discards such meanings by convention and experience of
 handling mathematical documents, however, teaching this to a computer is
 a complex task.
 The approach that 
\series bold
MathSemantifier 
\series default
takes is simply extracting all the possible meanings, while trying to apply
 heuristics to weed out impossible meanings.
\end_layout

\begin_layout Subsection
An Introduction to MathSemantifier
\end_layout

\begin_layout Standard
In order to understand what 
\series bold
MathSemantifier 
\series default
does, the Presentation Algorithm needs to be explained first.
 The reason for that is that 
\series bold
MathSemantifier 
\series default
is the exact opposite of the Presentation Algorithm, trying to convert PMML
 to CMML, as opposed to CMML to PMML.
\end_layout

\begin_layout Standard
The presentation algorithm has its main goal to covert Content MathML to
 Presentation MathML, using a database of notation renderings.
 In 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:presentation_output}
\end_layout

\end_inset

 a typical example of what the presentation algorithm produces is displayed.
 The
\series bold
 
\series default
first child of the 
\series bold
semantics 
\series default
node contains the PMML that corresponds to the CMML contained in the 
\series bold
annotation-xml 
\series default
node.
 In order to produce this output, the algorithm used the notation 
\series bold
natarith addition (
\series default
shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:presentation_output}
\end_layout

\end_inset

 as well).
 OMDoc Notations like 
\series bold
natarith addition 
\series default
are initially written in sTeX, and then converted to OMDoc using LaTeXML.
 Further sections will reveal more detail both about the origin of the notation
 (see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{pre_not}
\end_layout

\end_inset

), as well as about the LaTeXML conversion (see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{pre_lat}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename present_math.png
	width 8cm
	height 5cm
	BoundingBox 0bp 0bp 533bp 300bp
	clip

\end_inset


\begin_inset space \hspace{}
\length 0.3cm
\end_inset


\begin_inset Graphics
	filename presen_not.png
	width 9cm
	height 5cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Presentation Algorithm Output and the corresponding Notation Definition
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{fig:presentation_output}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
MathSemantifier 
\series default
converts PMML into valid CMML as described above.
 In order to perform this task, it needs to match PMML against a list of
 notations.
 This is achieved by compiling the notations into a Context Free Grammar,
 and using a CFG Parsing Engine to parse the PMML.
 A parse returns a list of possible parse trees, out of which 
\series bold
MathSemantifier 
\series default
extracts information regarding what notations matched at top level.
 This is then done recursively for the arguments of the found notation.
 Parsing using CFGs is a known problem, so, instead of writing a Parsing
 Engine, a more reasonable approach is using an existing one.
 For that purpose, the 
\series bold
Marpa Grammar Engine 
\series default
is used.
\end_layout

\begin_layout Standard
Possible Applications of Semantification include:
\end_layout

\begin_layout Itemize

\series bold
MathWebSearch 
\begin_inset CommandInset citation
LatexCommand citep
key "MWS12"

\end_inset

 
\series default
(discussed in more detail in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{mws}
\end_layout

\end_inset

) is a search engine for mathematical formulas.
 Such search engines could greatly benefit from semantification.
 The idea is that a search engine is only as good as the database of information
 is.
 By improving the information it can search through by adding a semantic
 flavor to it, a new kind of queries could be possible - semantic queries.
 Rather than searching for strings, or formulas with free form subterms,
 the user could specify the meaning of the sought expression.
 This would improve a lot the relevance of the results, since there will
 be no result that matched just because it was presented in a similar manner.
 
\end_layout

\begin_layout Itemize
Another possibility for using semantification is theorem proving and correctness
 checking.
 One possible application would be realtime feedback to the user writing
 a paper about the correctness of the expressions used.
\end_layout

\begin_layout Itemize
The possibilities extend even beyond this.
 Using semantified content, rather than having a database of CMML expressions,
 it is possible to create a smart knowledge management system that could
 be used to create expert systems.
 The user could then ask questions, or create complex queries, to exploit
 the full power of semantic content.
\end_layout

\begin_layout Standard
Semantification will not make all of the above directly possible, however
 it is a necessary step towards achieving goals similar to the ones described
 above, that require more knowledge about the used content than just how
 it is rendered.
\end_layout

\begin_layout Section
Preliminaries
\end_layout

\begin_layout Standard
MathSemantifier uses a Notation Database to create the grammar it uses.
 Therefore, it needs to be explained where those notations come from.
 MMT 
\begin_inset CommandInset citation
LatexCommand citep
key "MMT"

\end_inset

 is a language developed as a scalable representation and interchange language
 for mathematical knowledge.
 The decisive factor about MMT is that there is already a large database
 of notations written in sTeX, which is transformed and stored in MMT in
 an original format that MathSemantifier is processing in order to generate
 a Context Free Grammar.
\end_layout

\begin_layout Standard
SMGloM 
\begin_inset CommandInset citation
LatexCommand citep
key "SMGLOM"

\end_inset

 is a part of the notation database of MMT that contains the notations used
 by 
\series bold
MathSemantifier
\series default
.
 SMGloM is also available online 
\begin_inset CommandInset citation
LatexCommand citep
key "smglomweb"

\end_inset

.
\end_layout

\begin_layout Standard
Since sTeX, as an extension of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

, is just as complex to parse, MMT uses LaTeXML in order to convert sTeX
 to OMDoc 
\begin_inset CommandInset citation
LatexCommand citep
key "OMDOC"

\end_inset

.
 OMDoc is then processed and stored in MMT.
 
\end_layout

\begin_layout Standard

\series bold
MathSemantifier
\series default
 takes the an auto-generated CFG and input from the 
\series bold
Web UI
\series default
 in order to produce possible parse trees of the input.
 Marpa Grammar Engine is the proposed.
 The main advantages are that Marpa handles ambiguous grammars and provides
 control over the parsing process.
 The author of Marpa provides a more detailed analysis of the advantages
 of Marpa (see 
\begin_inset CommandInset citation
LatexCommand citep
key "marpaParser"

\end_inset

).
\end_layout

\begin_layout Section
The 
\series bold
MathSemantifier System
\end_layout

\begin_layout Standard
The major idea of 
\series bold
MathSemantifier 
\series default
is, as already described in the introduction, finding possible Content MathML
 readings for Presentation MathML input expressions.
 
\end_layout

\begin_layout Standard
The general flow of a single semantification can be described as follows:
\end_layout

\begin_layout Enumerate
Context Free Grammar generation from the MMT Notations 
\end_layout

\begin_layout Enumerate
Parsing using the Marpa Grammar Engine and the generated CFG to detect the
 top level notation
\end_layout

\begin_layout Enumerate
Parsing the arguments of the top level notation recursively
\end_layout

\begin_layout Enumerate
Using the parse trees from step 2 and 3 to generate an internal representation
 of the meaning trees
\end_layout

\begin_layout Enumerate
Converting the meaning trees to Content MathML
\end_layout

\begin_layout Enumerate
Displaying the Content MathML trees in the frontend
\end_layout

\begin_layout Standard
The reason it was decided to use a CFG based solution is that there exist
 already parsing frameworks like the Marpa Grammar Engine.
 It solves all the parsing related technical problems, like parsing ambiguous
 expressions, different kinds of recursion, while also providing a high
 degree of freedom.
 
\end_layout

\begin_layout Standard
This sections goes into the details of how exactly semantification is accomplish
ed.
 First, a general overview of the goals of the project and its high level
 architecture is given.
 Then, each component is described in further detail.
\end_layout

\begin_layout Standard
The main goals of the project can be expressed in a concise manner as follows:
\end_layout

\begin_layout Enumerate
Generating the correct set of parses efficiently and effectively
\end_layout

\begin_layout Enumerate
Providing opportunities for improvement for further research in the area
\end_layout

\begin_layout Standard
The architecture can be roughly divided into four parts as shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:7}
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 2cm
\end_inset


\begin_inset Graphics
	filename myThesisComponents_diagram.png
	width 12cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
MathSemantifier
\series default
 Architecture 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{fig:7}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\series bold
Web UI 
\series default
is a core component of 
\series bold
MathSemantifier.

\series default
 It is intended to be a lightweight solution that queries a server for the
 results of more computationally intensive tasks.
\end_layout

\begin_layout Standard
The interface consists of an input area, where 
\series bold
MathML 
\series default
needs to be inputted, and three options:
\end_layout

\begin_layout Enumerate
Semantify (The user can guide the semantification of the top symbol directly,
 by choosing the correct matching range, notation and argument positions)
\end_layout

\begin_layout Enumerate
Show Semantic Tree (The other option is to ask for all the possibilities
 and get all the semantic trees)
\end_layout

\begin_layout Enumerate
Evaluation (In this case, by repeatedly pressing this, the user is walked
 through a series of examples to demo the functionality)
\end_layout

\begin_layout Standard
The 
\series bold
Evaluation 
\series default
option will be discussed in more detail in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{8}
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The repository containing the 
\series bold
Web UI 
\series default
can be found on GitHub 
\begin_inset CommandInset citation
LatexCommand citep
key "codeWebUI"

\end_inset

.
\end_layout

\begin_layout Standard
User Guided Semantification is performed as follows: The user provides Presentat
ion MathML as input to the system, then uses the 
\series bold
Semantify 
\series default
button to reveal a list of top level notation names.
 The names of the notations are derived from the notation paths as follows:
 
\series bold
archive name
\series default
 + 
\series bold
symbol name
\series default
, for example, 
\series bold
natarith addition 
\series default
refers to the addition of natural numbers.
 After determining which notation is the correct one, the user needs to
 make sure that the arguments were detected properly and, finally, the resulting
 Content MathML tree is displayed (see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:6}
\end_layout

\end_inset

 for a similar representation of the result).
\end_layout

\begin_layout Standard
The easier but computationally more expensive alternative is to simply generate
 all the possible parse trees at once and display them.
 The user simply needs to click the 
\series bold
Show Semantic Tree
\series default
 option.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 2cm
\end_inset


\begin_inset Graphics
	filename auto1.png
	width 12cm
	BoundingBox 0bp 5bp 800bp 972bp
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Semantic Tree Results 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{fig:6}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the example shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:6}
\end_layout

\end_inset

, there is a total of 342 different readings.
 This can be easily explained, since 
\series bold
Invisible Times
\series default
, 
\series bold
Arithmetic Plus
\series default
 and 
\series bold
Mod 
\series default
have each multiple notations definitions (that originate from different
 MMT archives, for instance), and there are no limitations on what kind
 of notation definitions can go together in the same CMML tree.
\end_layout

\begin_layout Standard
In order to minimize the Content MathML, the standard allows subtree sharing.
 To enable this option, the 
\series bold
Use term sharing 
\series default
checkbox should be checked.
 In that case, the terms is shared along different readings.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The MMT Backend is a 
\series bold
Server Extension 
\series default
that is part of MMT.
 As shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:7}
\end_layout

\end_inset

, it is linked via 
\series bold
REST
\series default
 with the 
\series bold
Web UI 
\series default
and the 
\series bold
Parsing Backends.

\series default
 
\end_layout

\begin_layout Standard
Its role can be summarized to the following core functions:
\end_layout

\begin_layout Enumerate
Compile the 
\series bold
MMT Notations
\series default
 into a CFG Grammar
\end_layout

\begin_layout Enumerate
Receive the input from the 
\series bold
Web UI
\series default
 and build its Semantic Tree
\end_layout

\begin_layout Enumerate
Delegate the parsing to the 
\series bold
Parsing Backends
\end_layout

\begin_layout Standard
I decided to put the core logic of the application in MMT in order to make
 it easier to interoperate with the MMT Notation Database, as well as with
 any other MMT components that may want to need 
\series bold
MathSemantifier.

\series default
 By the current design, using 
\series bold
MathSemantifier 
\series default
within MMT is as simple as a function call that takes the input as a string.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cfg_preamble.png
	width 8cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CFG Preamble
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{fig:cfg_preamble}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code can be found as part of the MMT codebase 
\begin_inset CommandInset citation
LatexCommand citep
key "codeMMT"

\end_inset

.
\end_layout

\begin_layout Standard
Let us look at the components of the MMT Backends in more detail below.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{0.1cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Grammar Generator aggregates all the knowledge contained in the MMT
 Notations into one Context Free Grammar.
 The grammar is shaped into the normal form accepted by the Marpa Grammar
 Engine.
 To achieve this, the format used to store the notations in MMT is decomposed
 into CFG rules.
 Otherwise said, the tree-like structure of each formula, that is stored
 as nested applications of 
\series bold
MMT Markers 
\series default
(discussed previously) needs to be serialized into CFG rules.
\end_layout

\begin_layout Standard
This is done in several steps:
\end_layout

\begin_layout Enumerate
Break apart the 
\series bold
MMT Marker 
\series default
trees into level by level representations
\end_layout

\begin_layout Enumerate
Transform the intermediate representation into valid CFG rules
\end_layout

\begin_layout Standard
The fundamental structure of the CFG is established using a preamble as
 shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:cfg_preamble}
\end_layout

\end_inset

.
 Note the default action is the 
\series bold
Grammar Entry Point.

\series default
 It is precisely what tells the Grammar Engine to build parse trees, and
 also determines their structure.
\end_layout

\begin_layout Standard
The entry point into the grammar is the 
\series bold
Expression 
\series default
rule.
 It can be an MMT Notation, or Presentation MathML.
 The 
\series bold
prec0
\series default
 rule should be read as precedence zero, that is - the lowest precedence
 there is.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0col%
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename cfg_ex.png
	width 10cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
MMT Notation in CFG
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{fig:cfg_ex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Precedence handling is done using a commonly used method for including it
 in CFGs.
 The 
\series bold
Notation Precedences 
\series default
section in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:cfg_preamble}
\end_layout

\end_inset

 gives a quick glance at how exactly it is done.
 The number of precedences needs to be known in advance, then, for each
 precedence value a corresponding 
\series bold
precN
\series default
 rule is created.
\end_layout

\begin_layout Standard
The rule contains all the notations with that precedence, and, one of the
 alternatives is going to a higher precedence value.
 In the example below there are 15 used precedence values (
\series bold
prec0 
\series default
corresponds to precedence 
\begin_inset Formula $-\infty$
\end_inset

).
 However, the 
\series bold
Notation Precedences 
\series default
section shows only half of the concept.
\end_layout

\begin_layout Standard
To make this approach work, what is also needed is that the arguments in
 a rule of a certain precedence 
\begin_inset ERT
status open

\begin_layout Plain Layout

N
\end_layout

\end_inset

 can only contain notations with precedence 
\begin_inset Formula $K$
\end_inset

 if 
\begin_inset Formula $K>N$
\end_inset

.
 This is done by the 
\series bold
Argument Precedences 
\series default
part in the preamble (as shown in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:cfg_preamble}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
Finally, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:cfg_ex}
\end_layout

\end_inset

 presents an example of what the 
\series bold
natharith addition 
\series default
MMT notation from the 
\series bold
smglom/numberfields 
\series default
archive translated to CFG rules looks like.
\end_layout

\begin_layout Standard
The 
\series bold
Semantic Tree Generator 
\series default
works by recursively querying the 
\series bold
Parsing Backend 
\series default
and using the result to construct a the tree of possible meanings.
\end_layout

\begin_layout Standard
The parse trees stored in MMT have the following structure:
\end_layout

\begin_layout Itemize

\series bold
Variants - 
\series default
represents a list of possible readings.
 It is always be the top node in any parse tree.
\end_layout

\begin_layout Itemize

\series bold
Notation - 
\series default
a notation detected in the input.
 It contains its name and arguments.
\end_layout

\begin_layout Itemize

\series bold
Argument - 
\series default
an argument of a notation.
 The plugin is recursively called on it to construct its meaning subtree
 as well.
\end_layout

\begin_layout Itemize

\series bold
RawString - 
\series default
the ground term representation
\end_layout

\begin_layout Standard
The final part of any of the semantification processes is converting the
 internal representation to a standard one, which is CMML in this case.
 MMT provides a simple API which requires:
\end_layout

\begin_layout Enumerate
The MMT notation path
\end_layout

\begin_layout Enumerate
The argument maps (maps from the argument number to the corresponding substring)
\end_layout

\begin_layout Standard
Both of which are available in my representation structure.
 The argument path is obtained by extracting the argument number from the
 argument name, and looking up in a map of paths created at the time of
 grammar creation.
 This implies the grammar rule names are overloaded with meaning, however,
 the possibilities are very limited in this aspect since the parsing framework
 used does not give complete control over the parsing process.
\end_layout

\begin_layout Standard
The Parsing Backend 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
autoref{fig:7}
\end_layout

\end_inset

 receives requests from the 
\series bold
Web UI 
\series default
directly for Guided Semantification and from the 
\series bold
MMT Backend 
\series default
for Semantic Tree Generation.
 All the parsing related work is delegated to this backend.
\end_layout

\begin_layout Standard
The code of the Parsing Backend can be found on GitHub 
\begin_inset CommandInset citation
LatexCommand citep
key "codeParsingBackend"

\end_inset

.
\end_layout

\begin_layout Standard
The parsing backend consists of two parts.
 
\end_layout

\begin_layout Standard
First of all, the the CFG needs to be queried and parsed.
 This is implemented using lazy evaluation, which means that it is only
 done when a request actually comes.
\end_layout

\begin_layout Standard
The serialized CFG is unpacked and feed to the Marpa Parser Generator.
\end_layout

\begin_layout Standard
The more complex of the two parts is actually going through the parse trees
 and extracting useful information.
 Note that going through all the parse trees is not practical, so only the
 first 
\begin_inset Formula $N$
\end_inset

 (currently 
\begin_inset Formula $1000$
\end_inset

) parse trees are processed.
 This still gives the correct results in most cases since the grammar rules
 are optimized for giving preference to parse trees that are more likely
 to be correct (discussed in more detail in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[6]{section 6}
\end_layout

\end_inset

).
\end_layout

\begin_layout Section
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{8}
\end_layout

\end_inset

Evaluation 
\end_layout

\begin_layout Standard
This section presents an evaluation of 
\series bold
MathSemantifier 
\series default
from the point of view of efficiency and effectiveness of semantic tree
 generation.
 Next, the interoperability of the system with other possible applications
 is examined, which mostly depends on the backend APIs.
\end_layout

\begin_layout Standard
Testing 
\series bold
MathSemantifier
\series default
 through normal operation is not a trivial task, because the results need
 a human expert to check whether the results are indeed correct.
 Fortunately, the 
\series bold
MathHub Glossary 
\begin_inset CommandInset citation
LatexCommand citep
key "glossary"

\end_inset


\series default
 contains a sufficient number (about 3000) of examples of Presentation MathML
 with Content MathML annotations that result from applying the 
\series bold
Presentation Algorithm
\series default
 discussed in the introduction.
 Since 
\series bold
MathSemantifier 
\series default
is the partial inverse of the 
\series bold
Presentation Algorithm, 
\series default
checking whether the results are indeed correct boils down to comparing
 two Content MathML trees.
\end_layout

\begin_layout Standard
For the purpose of testing 
\series bold
MathSemantifier
\series default
 on the 
\series bold
MathHub Glossary, 
\series default
the 
\series bold
Evaluation 
\series default
option mentioned in the 
\series bold
Web UI
\series default
 section is used.
 It processes examples from the 
\series bold
MathHub Glossary.
 
\end_layout

\begin_layout Standard
A visual control of approximately 500 examples from the 
\series bold
MathHub Glossary
\series default
 revealed the following results
\series bold
.
 
\series default
About 40% of the examples are semantified correctly.
 However, this is largely because of reasons that do not depend on 
\series bold
MathSemantifier
\series default
 itself.
\end_layout

\begin_layout Standard
Contrary to what the numerical result suggests, for expressions with less
 than 1000 parse trees that are correctly rendered, 
\series bold
MathSemantifier 
\series default
produces correct results with a very high probability.
\end_layout

\begin_layout Standard
Let us look into the reasons that make 
\series bold
MathSemantifier 
\series default
fail.
 First of all, the reasons that do not depend on the system itself.
\end_layout

\begin_layout Enumerate
The Presentation Algorithm fails to render CMML into PMML properly in about
 30-40% of the cases.
\end_layout

\begin_layout Enumerate
About 10% of the examples include symbols from archives that were not included
 in the CFG
\end_layout

\begin_layout Standard
Up to this point, if we exclude the above mentioned examples, the effective
 success rate of 
\series bold
MathSemantifier
\series default
 is about 80-90%.
\end_layout

\begin_layout Enumerate
Some notations are omitted because they create cycles in the CFG
\end_layout

\begin_layout Enumerate
Input data that is too long or complex having more than 1000 parse trees
\end_layout

\begin_layout Enumerate
Assuming the input is more knowledge-rich than it actually is
\end_layout

\begin_layout Standard
While the effective success rate of 80-90% is inspiring for a proof of concept
 system, the main issue of 
\series bold
MathSemantifier 
\series default
is simply poor performance on long or complex input.
 Therefore, 
\series bold
MathSemantifier
\series default
 is a successful proof of concept, but not yet a practical tool.
\end_layout

\begin_layout Section
Conclusions 
\end_layout

\begin_layout Standard
The conclusion of this study is the proof of concept architecture and implementa
tion of a system capable of converting 
\series bold
Presentation MathML
\series default
 to all the possible meanings, which is a list of 
\series bold
Content MathML
\series default
.
 The testing revealed that the system is able to recognize correctly single
 top level symbols, as well as the whole set of readings of expressions
 with less than 1000 parse trees (this is not the limit, but no testing
 in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hyperref[8]{section 8}
\end_layout

\end_inset

 is done beyond that).
 Naturally, 
\series bold
MathSemantifier 
\series default
can only recognize the symbols that were used when building the Context
 Free Grammar it uses.
 This shows that it is certainly possible to aggregate the knowledge from
 the MMT Notations and to use it for parsing purposes.
 However, both the Notations and the Parsing Framework need significant
 improvements in order for the system to be scalable beyond what is presented
 in the previous section.
 The most important part of this study is, therefore, the optimizations
 and heuristics used, and other techniques presented below that further
 research could benefit from.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibtexDatabase"
options "bibtotoc,alpha-fr"

\end_inset


\end_layout

\end_body
\end_document
